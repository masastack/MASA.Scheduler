stages:
  - docker-dev
  - deploy-dev
  - deploy-test
  #- deploy-staging
  - docker-prd
  - deploy-prd

variables:
  NEW_IMAGE_Scheduler_Server: $CI_ALI_REGISTRY_DOMAIN/masastack/masa-scheduler-services-server:$CI_COMMIT_TAG
  NEW_IMAGE_Scheduler_Worker: $CI_ALI_REGISTRY_DOMAIN/masastack/masa-scheduler-services-worker:$CI_COMMIT_TAG
  NEW_IMAGE_Scheduler_Web_Admin_Server: $CI_ALI_REGISTRY_DOMAIN/masastack/masa-scheduler-web-admin-server:$CI_COMMIT_TAG

  NEW_IMAGE_Scheduler_Server_DEV: $CI_ALI_REGISTRY_DOMAIN/masastack/masa-scheduler-services-server:dev-$CI_PIPELINE_ID
  NEW_IMAGE_Scheduler_Worker_DEV: $CI_ALI_REGISTRY_DOMAIN/masastack/masa-scheduler-services-worker:dev-$CI_PIPELINE_ID
  NEW_IMAGE_Scheduler_Web_Admin_Server_DEV: $CI_ALI_REGISTRY_DOMAIN/masastack/masa-scheduler-web-admin-server:dev-$CI_PIPELINE_ID

  DOCKER_Scheduler_Server_PATH: ./src/Services/Masa.Scheduler.Services.Server/Dockerfile
  DOCKER_Scheduler_Worker_PATH: ./src/Services/Masa.Scheduler.Services.Worker/Dockerfile
  DOCKER_Scheduler_Web_Admin_Server_PATH: ./src/Web/Masa.Scheduler.Web.Admin.Server/Dockerfile

  NAMESPACE_DEV: masastack-dev
  NAMESPACE_TEST: masastack-test
  NAMESPACE_STAGING: masastack-staging
  NAMESPACE_PRD: masastack

docker-dev:
  stage: docker-dev
  tags:
    - linux-shell
  before_script:
    - docker login -u $CI_ALI_REGISTRY_USER -p $CI_ALI_REGISTRY_PASSWD $CI_ALI_REGISTRY_DOMAIN 
  only:
    - main  
  script:
    - docker build -f $DOCKER_Scheduler_Server_PATH -t $NEW_IMAGE_Scheduler_Server_DEV .
    - docker push $NEW_IMAGE_Scheduler_Server_DEV 
    - docker build -f $DOCKER_Scheduler_Worker_PATH -t $NEW_IMAGE_Scheduler_Worker_DEV .
    - docker push $NEW_IMAGE_Scheduler_Worker_DEV
    - docker build -f $DOCKER_Scheduler_Web_Admin_Server_PATH -t $NEW_IMAGE_Scheduler_Web_Admin_Server_DEV .
    - docker push $NEW_IMAGE_Scheduler_Web_Admin_Server_DEV
  after_script:
    - docker rmi $NEW_IMAGE_Scheduler_Web_Admin_Server_DEV   
    - docker rmi $NEW_IMAGE_Scheduler_Worker_DEV
    - docker rmi $NEW_IMAGE_Scheduler_Server_DEV

deploy-dev:
  stage: deploy-dev
  image: registry.cn-hangzhou.aliyuncs.com/masa/library:kubectl-shell-v1.21.1
  only:
    - main
  script:
    - echo $KUBE_CONFIG_NEW_YDY | base64 -d > ./config
    - echo $CI_PIPELINE_ID
    - kubectl --kubeconfig ./config set image deployment/scheduler scheduler=$NEW_IMAGE_Scheduler_Web_Admin_Server_DEV -n $NAMESPACE_DEV
    - kubectl --kubeconfig ./config set image deployment/scheduler-service scheduler-service=$NEW_IMAGE_Scheduler_Server_DEV -n $NAMESPACE_DEV
    - kubectl --kubeconfig ./config set image statefulset/scheduler-worker scheduler-worker=$NEW_IMAGE_Scheduler_Worker_DEV -n $NAMESPACE_DEV
  retry: 2

deploy-test:
  stage: deploy-test
  image: registry.cn-hangzhou.aliyuncs.com/masa/library:kubectl-shell-v1.21.1
  only:
    - main
  script:
    - echo $KUBE_CONFIG_NEW_YDY | base64 -d > ./config
    - echo $CI_PIPELINE_ID
    - kubectl --kubeconfig ./config set image deployment/scheduler scheduler=$NEW_IMAGE_Scheduler_Web_Admin_Server_DEV -n $NAMESPACE_TEST
    - kubectl --kubeconfig ./config set image deployment/scheduler-service scheduler-service=$NEW_IMAGE_Scheduler_Server_DEV -n $NAMESPACE_TEST
    - kubectl --kubeconfig ./config set image statefulset/scheduler-worker scheduler-worker=$NEW_IMAGE_Scheduler_Worker_DEV -n $NAMESPACE_TEST
  retry: 2
  when: manual

# deploy-staging:
#   stage: deploy-staging
#   image: registry.cn-hangzhou.aliyuncs.com/masa/library:kubectl-shell-v1.21.1
#   only:
#     - main
#   script:
#     - echo $KUBE_CONFIG_NEW_YDY | base64 -d > ./config
#     - echo $CI_PIPELINE_ID
#     - kubectl --kubeconfig ./config set image deployment/scheduler scheduler=$NEW_IMAGE_Scheduler_Web_Admin_Server_DEV -n $NAMESPACE_STAGING
#     - kubectl --kubeconfig ./config set image deployment/scheduler-service scheduler-service=$NEW_IMAGE_Scheduler_Server_DEV -n $NAMESPACE_STAGING
#     - kubectl --kubeconfig ./config set image statefulset/scheduler-worker scheduler-worker=$NEW_IMAGE_Scheduler_Worker_DEV -n $NAMESPACE_STAGING
#   retry: 2
#   when: manual

docker-prd:
  stage: docker-prd
  tags:
    - linux-shell
  before_script:
    - docker login -u $CI_ALI_REGISTRY_USER -p $CI_ALI_REGISTRY_PASSWD $CI_ALI_REGISTRY_DOMAIN 
  only:
    - tags
  script:
    - docker build -f $DOCKER_Scheduler_Server_PATH -t $NEW_IMAGE_Scheduler_Server .
    - docker push $NEW_IMAGE_Scheduler_Server 
    - docker build -f $DOCKER_Scheduler_Worker_PATH -t $NEW_IMAGE_Scheduler_Worker .
    - docker push $NEW_IMAGE_Scheduler_Worker
    - docker build -f $DOCKER_Scheduler_Web_Admin_Server_PATH -t $NEW_IMAGE_Scheduler_Web_Admin_Server .
    - docker push $NEW_IMAGE_Scheduler_Web_Admin_Server
  after_script:
    - docker rmi $NEW_IMAGE_Scheduler_Web_Admin_Server   
    - docker rmi $NEW_IMAGE_Scheduler_Worker
    - docker rmi $NEW_IMAGE_Scheduler_Server

deploy-prd:
  stage: deploy-prd
  image: registry.cn-hangzhou.aliyuncs.com/masa/library:kubectl-shell-v1.21.1
  only:
    - tags
  script:
    - echo $KUBE_CONFIG_MASA_PRD | base64 -d > ./config
    - echo $CI_COMMIT_TAG
    - kubectl --kubeconfig ./config set image deployment/scheduler scheduler=$NEW_IMAGE_Scheduler_Web_Admin_Server -n $NAMESPACE_PRD
    - kubectl --kubeconfig ./config set image deployment/scheduler-service scheduler-service=$NEW_IMAGE_Scheduler_Server -n $NAMESPACE_PRD
    - kubectl --kubeconfig ./config set image statefulset/scheduler-worker scheduler-worker=$NEW_IMAGE_Scheduler_Worker -n $NAMESPACE_PRD
  retry: 2
  when: manual
