@inherits ProCompontentBase

<div @ref="Ref">
    <SSimpleModal Value="_visible" ValueChanged="HandleVisibleChanged" Title="@(GetTitle())" Class="full-height" HeaderClass="mr-4" OnCancel="CloseModal">
        <ChildContent>
            <MStepper Value="_step" Class="d-flex flex-column full-height">
                <MStepperItems Class="full-height">
                    <MStepperContent Step="1" Class="full-height pa-0">
                        @foreach (var (key, value) in GetEnumMap<JobTypes>())
                        {
                            <MCard Outlined Class="d-flex justify-center align-center rounded-6 mb-6" Style="@GetStyle(value)" OnClick="()=> SelectJobType(value)" Height="210">
                                <MButton Class="h6 regular--text" ActiveClass="h6 fill--text" IsActive="value == Model.JobType" Ripple=false Plain OnClick="()=> SelectJobType(value)" Color="@GetColor(value)">@T(key)</MButton>
                            </MCard>
                        }
                    </MStepperContent>
                    <MStepperContent Step="2" Class="full-height pa-0">
                        <MForm Model=Model EnableValidation @ref="basicForm" Class="full-height">
                            <AutoHeight Overflow>
                                <AutoHeightContent>
                                    <DefaultTitle Class="mt-0 mb-6">@T("BasicInformation")</DefaultTitle>
                                    <MRow NoGutters>
                                        <MCol Md="6">
                                            <STextField @bind-Value="@Model.Name" Label="@T("JobName")" HideDetails="@("auto")" />
                                        </MCol>
                                        @if (!_isAdd)
                                        {
                                            <MCol Md="6">
                                                <SSelect Class="ml-6" @bind-Value="Model.JobType" Label="@T("JobType")" HideDetails="@("auto")" Readonly Disabled Dense Outlined Clearable Items="GetEnumMap<JobTypes>()" ItemText="kv => T(kv.Key)" ItemValue="kv=>kv.Value">
                                                </SSelect>
                                            </MCol>
                                        }
                                    </MRow>
                                    <MRow NoGutters Class="mt-9">
                                        <MCol Md="6">
                                            <SUserAutoComplete Value="Model.OwnerId" ValueChanged="OnOwnerIdChange" @ref="_userAutoComplete" FillBackground="false" Outlined Label="@T("Owner")" Solo="false" Flat="false"></SUserAutoComplete>
                                        </MCol>
                                    </MRow>
                                    <MRow NoGutters Class="mt-9">
                                        <MCol Md="6">
                                            <MSwitch @bind-Value="Model.IsAlertException" Label="@T("IsAlertException")" Style="padding-top: 0px; margin-top:0px;" Class="ml-3"></MSwitch>
                                        </MCol>
                                    </MRow>
                                    <MRow NoGutters Class="mt-9">
                                        <MCol Md="6">
                                            <SSelect Value="Model.ScheduleType" ValueExpression="()=>Model.ScheduleType" TValue="ScheduleTypes" TItemValue="ScheduleTypes" TItem="KeyValuePair<string,ScheduleTypes>" ValueChanged="OnScheduleTypeChanged" Label="@T("ScheduleType")" HideDetails="@("auto")" Dense Outlined Clearable Items="GetEnumMap<ScheduleTypes>()" ItemText="kv => T(kv.Key)" ItemValue="kv=>kv.Value">
                                            </SSelect>
                                        </MCol>
                                        @if (Model.ScheduleType == ScheduleTypes.Cron)
                                        {
                                            <MCol Md="6">
                                                <STextField Class="ml-6" Value="Model.CronExpression" TValue="string" ValueChanged="OnCronValueChange" HideDetails="@("auto")" Label="@T("CronExpression")" Outlined Dense AppendIcon="mdi-clock" OnAppendClick="OpenCronModal">
                                                </STextField>
                                            </MCol>
                                        }
                                    </MRow>
                                    @if (Model.ScheduleType == ScheduleTypes.Cron && !string.IsNullOrWhiteSpace(Model.CronExpression))
                                    {
                                        <div class="mt-4">
                                            <p>
                                                @T("ExpectedNextRunTime"):
                                            </p>
                                            <pre class="masa body2">
                                                @_nextRunTimeStr
                                                        </pre>
                                        </div>
                                    }
                                    <DefaultTitle>@T("RunStrategy")</DefaultTitle>
                                    <MRow NoGutters Class="mt-9">
                                        <MCol Md="6">
                                            <SSelect Value="Model.RoutingStrategy" ValueExpression="()=>Model.RoutingStrategy" ValueChanged="OnRoutingStrategyChanged" TValue="RoutingStrategyTypes" TItem="KeyValuePair<string, RoutingStrategyTypes>" TItemValue="RoutingStrategyTypes" Label="@T("RoutingStrategy")" HideDetails="@("auto")" Dense Outlined Clearable Items="GetEnumMap<RoutingStrategyTypes>()" ItemText="kv => T(kv.Key)" ItemValue="kv=>kv.Value">
                                            </SSelect>
                                        </MCol>
                                        @if (Model.RoutingStrategy == RoutingStrategyTypes.Specified)
                                        {
                                            <MCol Md="6">
                                                <SSelect Class="ml-6" @bind-Value="Model.SpecifiedWorkerHost" Label="Worker" HideDetails="@("auto")" Dense Outlined Clearable Items="_workerList" ItemText="worker => worker.GetServiceUrl()" ItemValue="worker=> worker.GetServiceUrl()">
                                                </SSelect>
                                            </MCol>
                                        }
                                    </MRow>
                                    <MRow NoGutters Class="mt-9">
                                        <MCol Md="6">
                                            <SSelect @bind-Value="Model.ScheduleExpiredStrategy" Label="@T("ScheduleExpiredStrategy")" HideDetails="@("auto")" Dense Outlined Clearable Items="GetEnumMap<ScheduleExpiredStrategyTypes>()" ItemText="kv => T(kv.Key)" ItemValue="kv=>kv.Value">
                                            </SSelect>
                                        </MCol>
                                        <MCol Md="6">
                                            <SSelect Class="ml-6" @bind-Value="Model.ScheduleBlockStrategy" Label="@T("ScheduleBlockStrategy")" HideDetails="@("auto")" Dense Outlined Clearable Items="GetEnumMap<ScheduleBlockStrategyTypes>()" ItemText="kv => T(kv.Key)" ItemValue="kv=>kv.Value">
                                            </SSelect>
                                        </MCol>
                                    </MRow>
                                    <MRow NoGutters Class="mt-9">
                                        <MCol Md="6">
                                            <SSelect @bind-Value="Model.RunTimeoutStrategy" Label="@T("RunTimeoutStrategy")" HideDetails="@("auto")" Dense Outlined Clearable Items="GetEnumMap<RunTimeoutStrategyTypes>()" ItemText="kv => T(kv.Key)" ItemValue="kv=>kv.Value">
                                            </SSelect>
                                        </MCol>
                                        <MCol Md="6">
                                            <STextField Class="ml-6" @bind-Value="Model.RunTimeoutSecond" Type="number" NumberProps="(p)=>{ p.HideControl = true; p.Min=0; }" Label="@T("RunTimeoutSecond")" HideDetails="@("auto")" Dense Outlined />
                                        </MCol>
                                    </MRow>
                                    <DefaultTitle>@T("FailedStrategy")</DefaultTitle>
                                    <MRow NoGutters Class="mt-9">
                                        <MCol Md="4">
                                            <MButtonGroup Value="Model.FailedStrategy.ToString()" Class="rounded-lg elevation-tab" Group Tile Dense Mandatory Borderless>
                                                @foreach (var (key, value) in GetEnumMap<FailedStrategyTypes>())
                                                {
                                                    <SButton OnClick="async() => await SwitchFailedStrategyType(value)" Value="@value.ToString()" Ripple=false Class="rounded-lg" MinWidth=100>
                                                        @T(key)
                                                    </SButton>
                                                }
                                            </MButtonGroup>
                                        </MCol>
                                        @if (Model.FailedStrategy == FailedStrategyTypes.Auto)
                                        {
                                            <MCol Md="4">
                                                <STextField Class="ml-6" Type="number" NumberProps="(p)=>{ p.HideControl = true; p.Min = 1; }" @bind-Value="Model.FailedRetryInterval" Label="@T("FailedRetryInterval")" HideDetails="@("auto")" Dense Outlined />
                                            </MCol>
                                            <MCol Md="4">
                                                <STextField Class="ml-6" Type="number" NumberProps="(p)=>{ p.HideControl = true; p.Min = 1; p.Max = 10; }" @bind-Value="Model.FailedRetryCount" Label="@T("FailedRetryCount")" HideDetails="@("auto")" Dense Outlined />
                                            </MCol>
                                        }
                                    </MRow>
                                    <MRow NoGutters Class="mt-9">
                                        <MCol Cols="12">
                                            <STextarea @bind-Value="Model.Description" Label="@T("Description")" HideDetails="@("auto")" Outlined />
                                        </MCol>
                                    </MRow>
                                </AutoHeightContent>
                                <FooterContent>
                                    <div class="d-flex mt-9">
                                        <MIcon Size="24" Color="emphasis2" OnClick="PreviousStep">mdi-keyboard-backspace</MIcon>
                                        <MSpacer></MSpacer>
                                        <MButton Color="primary" Class="btn-form ml-6" OnClick="()=> NextStep(context)">@T("NextStep")</MButton>
                                    </div>
                                </FooterContent>
                            </AutoHeight>

                            @*<div class="full-height flex-column">

                            <div class="mt-2" style="overflow-y: auto;overflow-x: hidden;max-height: 740px;">
                            <div class="d-flex mt-2 mr-2">
                            <MSpacer></MSpacer>
                            @if (Model.Id == Guid.Empty)
                            {
                            <SButton Outlined Color="primary" Class="small-button" OnClick="PreviousStep" Text>@T("PreviousStep")</SButton>
                            }
                            <SButton Color="primary" Class="small-button ml-6" OnClick="() => NextStep(context)">@T("NextStep")</SButton>
                            </div>
                            </div>

                            </div>*@
                        </MForm>
                    </MStepperContent>
                    <MStepperContent Step="3" Class="full-height pa-0">
                        @if (Model.JobType == JobTypes.Http)
                        {
                            <MForm Model=Model.HttpConfig EnableValidation @ref="httpForm" Class="full-height">
                                <AutoHeight Overflow>
                                    <AutoHeightContent>
                                        <MRow NoGutters Class="mt-1">
                                            <MCol Md="6">
                                                <SSelect @bind-Value="Model.HttpConfig.HttpMethod" Label="@T("HttpMethod")" HideDetails="@("auto")" Dense Outlined Clearable Items="GetEnumMap<HttpMethods>()" ItemText="kv => T(kv.Key)" ItemValue="kv=>kv.Value">
                                                </SSelect>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="6">
                                                <STextField @bind-Value="Model.HttpConfig.RequestUrl" Label="@T("RequestUrl")" HideDetails="@("auto")" Dense Outlined />
                                            </MCol>
                                        </MRow>
                                        <DefaultTitle>@T("RequestParameters")</DefaultTitle>
                                        <MRow NoGutters Class="mt-6">
                                            <MCol Md="6">
                                                <MButtonGroup Value="_httpParameterTypes.ToString()" Class="rounded-lg" Color="primary" Group Tile Dense Mandatory Borderless>
                                                    @foreach (var (key, value) in GetEnumMap<HttpParameterTypes>())
                                                    {
                                                        <MButton OnClick="async() => await SwitchHttpParameterType(value)" Value="@value.ToString()" Ripple=false Class="rounded-lg" MinWidth=100>
                                                            @T(key)
                                                        </MButton>
                                                    }
                                                </MButtonGroup>
                                            </MCol>
                                        </MRow>
                                        @if (_httpParameterTypes == HttpParameterTypes.Parameter)
                                        {
                                            <DynamicKeyValueComponent @bind-Value="Model.HttpConfig.HttpParameters">
                                            </DynamicKeyValueComponent>
                                        }
                                        else if (_httpParameterTypes == HttpParameterTypes.Headers)
                                        {
                                            <DynamicKeyValueComponent @bind-Value="Model.HttpConfig.HttpHeaders">
                                            </DynamicKeyValueComponent>
                                        }
                                        else
                                        {
                                            <MRow NoGutters Class="mt-9">
                                                <MCol Md="12">
                                                    <STextarea @bind-Value="Model.HttpConfig.HttpBody" Label="@T("HttpBody")" HideDetails="@("auto")" Dense Outlined Rows="5">
                                                    </STextarea>
                                                </MCol>
                                            </MRow>
                                        }
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="6">
                                                <SSelect @bind-Value="Model.HttpConfig.HttpVerifyType" Label="@T("HttpVerifyType")" HideDetails="@("auto")" Dense Outlined Clearable Items="GetEnumMap<HttpVerifyTypes>()" ItemText="kv => T(kv.Key)" ItemValue="kv=> kv.Value">
                                                </SSelect>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="12">
                                                <STextarea @bind-Value="Model.HttpConfig.VerifyContent" Label="@T("VerifyContent")" HideDetails="@("auto")" Dense Outlined Rows="5">
                                                </STextarea>
                                            </MCol>
                                        </MRow>
                                    </AutoHeightContent>
                                    <FooterContent>
                                                <div class="d-flex mt-9 align-center">
                                            <MIcon Size="24" Color="emphasis2" OnClick="PreviousStep">mdi-keyboard-backspace</MIcon>
                                            @if (Model.Id != Guid.Empty)
                                            {
                                                <span class="d-flex px-6" style="height: 12px">
                                                    <MDivider Vertical />
                                                </span>
                                                <MIcon Size="24" Color="error" Class="align-self-center" OnClick="HandleDel">mdi-delete</MIcon>
                                            }
                                            <MSpacer></MSpacer>
                                            <MButton Color="primary" Class="btn-form ml-6" OnClick="()=> Submit(context)">@T("Save")</MButton>
                                        </div>
                                    </FooterContent>
                                </AutoHeight>
                            </MForm>
                        }
                        else if (Model.JobType == JobTypes.JobApp)
                        {
                            <MForm Model=Model.JobAppConfig EnableValidation @ref="jobAppForm" Class="full-height">
                                <AutoHeight Overflow>
                                    <AutoHeightContent>
                                        <MRow NoGutters Class="mt-1">
                                            <MCol Md="6">
                                                <SSelect Value="Model.JobAppConfig.JobAppIdentity" ValueExpression="()=> Model.JobAppConfig.JobAppIdentity" TValue="string" TItem="ProjectAppDto" TItemValue="string" ValueChanged="OnJobAppChanged" Label="@T("JobAppId")" HideDetails="@("auto")" Dense Outlined Clearable Items="_jobApp" ItemText="app => app.Name" ItemValue="app=>app.Identity">
                                                </SSelect>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="6">
                                                <STextField @bind-Value="Model.JobAppConfig.JobEntryAssembly" Placeholder="*.dll" Label="@T("JobEntryAssembly")" HideDetails="@("auto")" Dense Outlined>
                                                </STextField>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="6">
                                                <STextField @bind-Value="Model.JobAppConfig.JobEntryClassName" Placeholder="Namespace.Class" Label="@T("JobEntryClass")" HideDetails="@("auto")" Outlined>
                                                </STextField>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="12">
                                                <STextarea @bind-Value="Model.JobAppConfig.JobParams" Label="@T("OptionParams")" HideDetails="@("auto")" Dense Outlined>
                                                </STextarea>
                                            </MCol>
                                        </MRow>
                                        <DefaultTitle>@T("ResourceVersion")</DefaultTitle>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="6">
                                                <MButtonGroup Value="_resourceVersionType.ToString()" Class="rounded-lg elevation-tab" Group Tile Dense Mandatory Borderless>
                                                    @foreach (var (key, value) in GetEnumMap<ResourceVersionTypes>())
                                                    {
                                                        <SButton OnClick="async() => await SwitchResourceVersionType(value)" Value="@value.ToString()" Ripple=false Class="rounded-lg" MinWidth=100>
                                                            @T(key)
                                                        </SButton>
                                                    }
                                                </MButtonGroup>
                                            </MCol>
                                            @if (_resourceVersionType == ResourceVersionTypes.SpecifiedVersion)
                                            {
                                                <MCol Md="6">
                                                    <SSelect @bind-Value="Model.JobAppConfig.Version" Label="@T("ResourceVersion")" HideDetails="@("auto")" Dense Outlined Clearable Items="_versionList" ItemText="version => version" ItemValue="version=> version">
                                                    </SSelect>
                                                </MCol>
                                            }
                                        </MRow>
                                    </AutoHeightContent>
                                    <FooterContent>
                                        <div class="d-flex mt-9 align-center">
                                            <MIcon Size="24" Color="emphasis2" OnClick="PreviousStep">mdi-keyboard-backspace</MIcon>
                                            @if (Model.Id != Guid.Empty)
                                            {
                                                <span class="d-flex px-6" style="height: 12px">
                                                    <MDivider Vertical />
                                                </span>
                                                <MIcon Size="24" Color="error" Class="align-self-center" OnClick="HandleDel">mdi-delete</MIcon>
                                            }
                                            <MSpacer></MSpacer>
                                            <MButton Color="primary" Class="btn-form ml-6" OnClick="()=> Submit(context)">@T("Save")</MButton>
                                        </div>
                                    </FooterContent>
                                </AutoHeight>
                            </MForm>
                        }
                        else if (Model.JobType == JobTypes.DaprServiceInvocation)
                        {
                            <MForm Model=Model.DaprServiceInvocationConfig EnableValidation @ref="daprForm" Class="full-height">
                                <AutoHeight Overflow>
                                    <AutoHeightContent>
                                        <MRow NoGutters Class="mt-1">
                                            <MCol Md="6">
                                                <SSelect Value="Model.DaprServiceInvocationConfig.DaprServiceIdentity" TValue="string" TItemValue="string" TItem="ProjectAppDto" ValueChanged="DaprServiceAppChange" Label="@T("DaprServiceAppId")" HideDetails="@("auto")" Dense Outlined Clearable Items="_serviceApp" ItemText="app => app.Name" ItemValue="app=>app.Identity">
                                                </SSelect>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="6">
                                                <STextField @bind-Value="Model.DaprServiceInvocationConfig.Namespace" Label="@T("Namespace")" HideDetails="@("auto")" Dense Outlined>
                                                </STextField>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="6">
                                                <STextField @bind-Value="Model.DaprServiceInvocationConfig.MethodName" Label="@T("MethodName")" HideDetails="@("auto")" Dense Outlined>
                                                </STextField>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="6">
                                                <SSelect @bind-Value="Model.DaprServiceInvocationConfig.HttpMethod" Label="@T("HttpMethod")" HideDetails="@("auto")" Dense Outlined Clearable Items="GetEnumMap<HttpMethods>()" ItemText="kv => T(kv.Key)" ItemValue="kv=>kv.Value">
                                                </SSelect>
                                            </MCol>
                                        </MRow>
                                        <MRow NoGutters Class="mt-9">
                                            <MCol Md="12">
                                                <STextarea @bind-Value="Model.DaprServiceInvocationConfig.Data" Label="@T("Data")" HideDetails="@("auto")" Dense Outlined Rows="10">
                                                </STextarea>
                                            </MCol>
                                        </MRow>
                                    </AutoHeightContent>
                                    <FooterContent>
                                        <div class="d-flex mt-9" style="align-items: center;">
                                            <MIcon Size="24" Color="emphasis2" OnClick="PreviousStep">mdi-keyboard-backspace</MIcon>
                                            @if (Model.Id != Guid.Empty)
                                            {
                                                <span class="d-flex px-6 align-center">
                                                    <MDivider Vertical />
                                                </span>
                                                <MIcon Size="24" Color="error" Class="align-self-center" OnClick="HandleDel">mdi-delete</MIcon>
                                            }
                                            <MSpacer></MSpacer>
                                            <MButton Color="primary" Class="btn-form ml-6" OnClick="()=> Submit(context)">@T("Save")</MButton>
                                        </div>
                                    </FooterContent>
                                </AutoHeight>
                            </MForm>
                        }
                    </MStepperContent>
                </MStepperItems>
            </MStepper>
        </ChildContent>
    </SSimpleModal>
    <SSimpleModal @bind-Value="@_cronVisible" Title="@T("CronExpression")" SaveText="@T("Sure")" OnSave="() => SetCronExpression()">
        <PCron @bind-Value="@(_tempCron)">
        </PCron>
    </SSimpleModal>
</div>