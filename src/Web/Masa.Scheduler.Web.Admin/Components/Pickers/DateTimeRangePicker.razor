@inherits ProComponentBase

<div class="d-flex fill rounded-lg datetimerangepicker @Class" style="@Style">
    <MIcon Size=20 Color="emphasis2--text" Class="@($"pl-2 {IconClass}")">mdi-calendar-month</MIcon>
    <MMenu @bind-Value="StartTimeVisible" CloseOnContentClick="false" OffsetY Transition="scale-transition">
        <ActivatorContent>
            <div class="text-btn ml-1 my-auto hover-pointer text-center" style="height:20px;width:calc(50% - 23px)" @attributes="@context.Attrs">
                @if (StartTime.HasValue)
                {
                    <span class="regular--text">@StartTime?.Add(JsInitVariables.TimezoneOffset).ToString(T("$DateTimeFormat"))</span>
                }
                else
                {
                    <span class="text-btn">@T("PleaseSelectStartTime")</span>
                }
            </div>
        </ActivatorContent>
        <ChildContent>
            <SDateTimePicker @bind-Value=_internalStartTime Max=_internalEndTime>
                <MButton Text Color="primary" OnClick="async() => await UpdateStartTimeAsync()">@T("Confirm")</MButton>
            </SDateTimePicker>
        </ChildContent>
    </MMenu>
    <MDivider Vertical></MDivider>
    <MMenu @bind-Value="EndTimeVisible" CloseOnContentClick="false" OffsetY Transition="scale-transition">
        <ActivatorContent>
            <div class="text-btn my-auto hover-pointer text-center" style="height:20px;width:calc(50% - 23px)" @attributes="@context.Attrs">
                @if (EndTime.HasValue)
                {
                    <span class="regular--text">@EndTime?.Add(JsInitVariables.TimezoneOffset).ToString(T("$DateTimeFormat"))</span>
                }
                else
                {
                    <span class="text-btn">@T("PleaseSelectEndTime")</span>
                }
            </div>
        </ActivatorContent>
        <ChildContent>
            <SDateTimePicker @bind-Value=_internalEndTime Min=_internalStartTime>
                <MButton Text Color="primary" OnClick="async() => await UpdateEndTimeAsync()">@T("Confirm")</MButton>
            </SDateTimePicker>
        </ChildContent>
    </MMenu>
</div>

@code {
    [Parameter]
    public DateTime? StartTime { get; set; }

    [Parameter]
    public EventCallback<DateTime?> StartTimeChanged { get; set; }

    [Parameter]
    public DateTime? EndTime { get; set; }

    [Parameter]
    public EventCallback<DateTime?> EndTimeChanged { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }

    [Parameter]
    public string IconClass { get; set; } = default!;

    private bool StartTimeVisible { get; set; }

    private bool EndTimeVisible { get; set; }

    private DateTime? _internalStartTime { get; set; }

    private DateTime? _internalEndTime { get; set; }

    protected override void OnParametersSet()
    {
        _internalStartTime = StartTime;
        _internalEndTime = EndTime;
    }

    private async Task UpdateStartTimeAsync()
    {
        StartTimeVisible = false;
        if (_internalStartTime > EndTime) await PopupService.EnqueueSnackbarAsync(T("Start time cannot be greater than end time"), AlertTypes.Warning);
        else
        {
            if (StartTimeChanged.HasDelegate) await StartTimeChanged.InvokeAsync(_internalStartTime);
            else StartTime = _internalStartTime;
            if (OnChange.HasDelegate) await OnChange.InvokeAsync();
        }
    }

    private async Task UpdateEndTimeAsync()
    {
        EndTimeVisible = false;
        if (_internalEndTime < StartTime) await PopupService.EnqueueSnackbarAsync(T("End time cannot be less than start time"), AlertTypes.Warning);
        else
        {
            if (EndTimeChanged.HasDelegate) await EndTimeChanged.InvokeAsync(_internalEndTime);
            else EndTime = _internalEndTime;
            if (OnChange.HasDelegate) await OnChange.InvokeAsync();
        }
    }
}
